use_gpu: True
device: 0
early_stop:
  patience: 50
seed: 0
federate:
  mode: standalone
  method: fedkd
  client_num: 5
  total_round_num: 200
  sample_client_rate: 1.0
  make_global_eval: False
MHFL:
  global_model:
    out_channels: 10
    type: CNN_3layers
    hidden: 256
    filter_channels: [64,64,64]
    dropout: 0.5
    use_bn: True
    return_proto: True
fedkd:
  tmin: 0.95
  tmax: 0.98
  use_SVD: False
data:
  root: data/
  local_eval_whole_test_dataset: True #important! Whether the test dataset for each client is equivalent to the test dataset for the unsplit dataset
  type: 'CIFAR10@torchvision'
  splits: [ 1.0, 0.0, 0.0 ]
  num_workers: 0
  transform: [ [ 'ToTensor' ], [ 'Normalize', { 'mean': [ 0.4914, 0.4822, 0.4465 ], 'std': [ 0.2470, 0.2435, 0.2616 ] } ] ] #very import
  test_transform: [ [ 'ToTensor' ], [ 'Normalize', { 'mean': [ 0.4914, 0.4822, 0.4465 ], 'std': [ 0.2470, 0.2435, 0.2616 ] } ] ]
  args: [ { 'download': True } ]
  splitter: 'lda'
  splitter_args: [ { 'alpha': 100.0 } ] #[100,1.0,0.1]
dataloader:
  batch_size: 10
model:
  dropout: 0.5
  out_channels: 10
  return_proto: True
train:
  local_update_steps: 1
  batch_or_epoch: epoch
  optimizer:
    type: Adam
    lr: 0.001
#    momentum: 0.0
#    weight_decay: 1e-4
criterion:
  type: CrossEntropyLoss
trainer:
  type: fedkd_cv_trainer
grad:
  grad_clip: 10.0
eval:
  freq: 1
  metrics: ['acc']
  report : ['weighted_avg', 'avg']
  best_res_update_round_wise_key: test_acc
exp_name: 'FedKD_HFL_MNIST'
result_floder: model_heterogeneity/result/manual